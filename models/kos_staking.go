package models

import (
	"math/big"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

/*
Defines the `StakingPool` collection which is used to store all staking pool data.
*/
type StakingPool struct {
	ID               primitive.ObjectID    `bson:"_id,omitempty"`              // the object ID of the staking pool
	StakingPoolID    int                   `bson:"stakingPoolID,omitempty"`    // unique ID for each staking pool (starts at 1 for the first staking pool, increments everytime)
	Reward           Reward                `bson:"reward,omitempty"`           // the reward for staking in this pool
	TotalYieldPoints int                   `bson:"totalYieldPoints,omitempty"` // the total yield points generated across ALL stakers (calculated from `StakingSubpool`)
	StartTime        time.Time             `bson:"startTime,omitempty"`        // the start time of the staking pool (when the staking pool is created)
	EndTime          time.Time             `bson:"endTime,omitempty"`          // when the staking pool ends (when the staking pool is closed)
	ActiveSubpools   []*primitive.ObjectID `bson:"activeSubpools,omitempty"`   // the active subpools for this staking pool (points to a subpool instance from the `StakingSubpool` collection)
	ClosedSubpools   []*primitive.ObjectID `bson:"closedSubpools,omitempty"`   // the closed subpools for this staking pool (either by unstaking, bans or after the pool ends. points to a subpool instance from the `StakingSubpool` collection)
}

/*
Defines the `StakingSubpool` collection which is used to store all staking subpool data for each staking pool.
*/
type StakingSubpool struct {
	ID                      primitive.ObjectID    `bson:"_id,omitempty"`                     // the object ID of the staking subpool
	SubpoolID               int                   `bson:"subpoolID,omitempty"`               // unique ID for each staking subpool (starts at 1 for the first staking subpool IN EACH POOL, increments everytime)
	Stakers                 []*primitive.ObjectID `bson:"stakers,omitempty"`                 // the stakers in this subpool (points to staker instances from the `Staker` collection)
	EnterTime               time.Time             `bson:"enterTime,omitempty"`               // the time when the staker enters the pool with this subpool
	ExitTime                time.Time             `bson:"exitTime,omitempty"`                // the time when the staker exits the pool with this subpool
	StakedKeys              []*KeyOfSalvation     `bson:"stakedKeys,omitempty"`              // the keys of salvation staked in this subpool
	StakedKeychains         []*big.Int            `bson:"stakedKeychains,omitempty"`         // the keychains staked in this subpool
	StakedSuperiorKeychains []*big.Int            `bson:"stakedSuperiorKeychains,omitempty"` // the superior keychains staked in this subpool
	PoolPoints              int                   `bson:"poolPoints,omitempty"`              // the pool's yield points generated by this subpool based on the NFTs staked
	RewardClaimed           bool                  `bson:"rewardClaimed,omitempty"`           // whether the reward has been claimed or not
}

/*
Represents a staker.
*/
type Staker struct {
	ID              primitive.ObjectID  `bson:"_id,omitempty"`             // the object ID of the staker
	Wallet          common.Address      `bson:"wallet,omitempty"`          // the wallet address of the staker
	TotalPools      []StakingPool       `bson:"totalPools,omitempty"`      // the total pools the staker has staked in
	TotalSubpools   []StakingSubpool    `bson:"totalSubpools,omitempty"`   // the total subpools the staker has staked in. Note: the amount of subpools will always be greater than or equal to the amount of pools staked in.
	TotalPoolPoints int                 `bson:"totalPoolPoints,omitempty"` // the total pool points generated by the staker across ALL staking pools
	BannedData      *primitive.ObjectID `bson:"bannedData,omitempty"`      // the banned data of the staker. nil if the user has not been banned.
}

/*
Represents the banned data of a staker.
*/
type BannedData struct {
	ID               primitive.ObjectID `bson:"_id,omitempty"`    // the object ID of the banned data
	BannedCount      int                `bson:"bannedCount"`      // the number of times the staker has been banned
	LastBanTime      time.Time          `bson:"lastBanTime"`      // the last time the staker was banned
	CurrentUnbanTime time.Time          `bson:"currentUnbanTime"` // the time when the staker will be unbanned. if now > unban time, then the staker is considered 'unbanned'. they will be allowed staking.
}

/*
Represents a Key Of Salvation's data.
*/
type KeyOfSalvation struct {
	TokenID        *big.Int `bson:"tokenID"`        // the token ID of the Key Of Salvation
	HouseTrait     string   `bson:"houseTrait"`     // the house trait of the Key Of Salvation
	TypeTrait      string   `bson:"typeTrait"`      // the type trait of the Key Of Salvation
	LuckTrait      *big.Int `bson:"luckTrait"`      // the luck trait of the Key Of Salvation
	LuckBoostTrait *big.Int `bson:"luckBoostTrait"` // the luck boost trait of the Key Of Salvation
}

/*
Represents a Reward for a staking pool.
*/
type Reward struct {
	Name   string `bson:"name"`   // example: "REC", "Limited Edition Collection X", etc.
	Amount int    `bson:"amount"` // the amount of the rewards. example: if Name is "REC" and Amount is 100, then the reward is 100 REC in total.
}
